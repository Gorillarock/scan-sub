version: '3'
services:

  # Starts the P/S emulator
  pubsub:
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:316.0.0-emulators
    ports:
      - "8085:8085"
    entrypoint: gcloud beta emulators pubsub start --project test-project --host-port 0.0.0.0:8085
    healthcheck:
      test: ["CMD", "curl", "-f", "http://pubsub:8085"]
      interval: 5s
      timeout: 10s
      retries: 3

  # Creates a topic
  mk-topic:
    image: alpine/httpie
    depends_on:
      pubsub:
        condition: service_healthy
    command: PUT http://pubsub:8085/v1/projects/test-project/topics/scan-topic

  # Creates a subscription
  mk-subscription:
    image: alpine/httpie
    depends_on:
      mk-topic:
        condition: service_completed_successfully
    command: PUT http://pubsub:8085/v1/projects/test-project/subscriptions/scan-sub topic=projects/test-project/topics/scan-topic --ignore-stdin 

  # Runs the "scanner"
  scanner:
    depends_on:
      mk-topic:
        condition: service_completed_successfully
    environment:
      PUBSUB_EMULATOR_HOST: pubsub:8085
      PUBSUB_PROJECT_ID: test-project
    build:
      context: .
      dockerfile: ./cmd/scanner/Dockerfile

  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    environment:
      DB_PATH: ${DB_PATH}
    volumes:
      - db_data:/db
    restart: always

  processor:
    depends_on:
      mk-subscription:
        condition: service_completed_successfully
      db:
        condition: service_started
    environment:
      PUBSUB_EMULATOR_HOST: pubsub:8085
      PUBSUB_PROJECT_ID: test-project
      DB_PATH: ${DB_PATH}
    build:
      context: .
      dockerfile: ./cmd/processor/Dockerfile
    volumes:
      - db_data:/db
  
  test_db_reader:
    profiles:
      - test
    depends_on:
      db:
        condition: service_started
    environment:
      DB_PATH: ${DB_PATH}
    build:
      context: .
      dockerfile: ./cmd/test_db_reader/Dockerfile
    volumes:
      - db_data:/db

volumes:
  db_data:
